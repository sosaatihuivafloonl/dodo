{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar cardTypes = require(\"./lib/card-types\");\nvar add_matching_cards_to_results_1 = require(\"./lib/add-matching-cards-to-results\");\nvar is_valid_input_type_1 = require(\"./lib/is-valid-input-type\");\nvar find_best_match_1 = require(\"./lib/find-best-match\");\nvar clone_1 = require(\"./lib/clone\");\nvar customCards = {};\nvar cardNames = {\n  VISA: \"visa\",\n  MASTERCARD: \"mastercard\",\n  AMERICAN_EXPRESS: \"american-express\",\n  DINERS_CLUB: \"diners-club\",\n  DISCOVER: \"discover\",\n  JCB: \"jcb\",\n  UNIONPAY: \"unionpay\",\n  MAESTRO: \"maestro\",\n  ELO: \"elo\",\n  MIR: \"mir\",\n  HIPER: \"hiper\",\n  HIPERCARD: \"hipercard\"\n};\nvar ORIGINAL_TEST_ORDER = [cardNames.VISA, cardNames.MASTERCARD, cardNames.AMERICAN_EXPRESS, cardNames.DINERS_CLUB, cardNames.DISCOVER, cardNames.JCB, cardNames.UNIONPAY, cardNames.MAESTRO, cardNames.ELO, cardNames.MIR, cardNames.HIPER, cardNames.HIPERCARD];\nvar testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\nfunction findType(cardType) {\n  return customCards[cardType] || cardTypes[cardType];\n}\nfunction getAllCardTypes() {\n  return testOrder.map(function (cardType) {\n    return clone_1.clone(findType(cardType));\n  });\n}\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  if (ignoreErrorForNotExisting === void 0) {\n    ignoreErrorForNotExisting = false;\n  }\n  var position = testOrder.indexOf(name);\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n  return position;\n}\nfunction creditCardType(cardNumber) {\n  var results = [];\n  if (!is_valid_input_type_1.isValidInputType(cardNumber)) {\n    return results;\n  }\n  if (cardNumber.length === 0) {\n    return getAllCardTypes();\n  }\n  testOrder.forEach(function (cardType) {\n    var cardConfiguration = findType(cardType);\n    add_matching_cards_to_results_1.addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n  var bestMatch = find_best_match_1.findBestMatch(results);\n  if (bestMatch) {\n    return [bestMatch];\n  }\n  return results;\n}\ncreditCardType.getTypeInfo = function (cardType) {\n  return clone_1.clone(findType(cardType));\n};\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n  testOrder.splice(position, 1);\n};\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n  customCards[config.type] = config;\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\ncreditCardType.updateCard = function (cardType, updates) {\n  var originalObject = customCards[cardType] || cardTypes[cardType];\n  if (!originalObject) {\n    throw new Error(\"\\\"\" + cardType + \"\\\" is not a recognized type. Use `addCard` instead.'\");\n  }\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error(\"Cannot overwrite type parameter.\");\n  }\n  var clonedCard = clone_1.clone(originalObject);\n  clonedCard = __assign(__assign({}, clonedCard), updates);\n  customCards[clonedCard.type] = clonedCard;\n};\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\ncreditCardType.resetModifications = function () {\n  testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\ncreditCardType.types = cardNames;\nmodule.exports = creditCardType;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","cardTypes","require","add_matching_cards_to_results_1","is_valid_input_type_1","find_best_match_1","clone_1","customCards","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","testOrder","clone","findType","cardType","getAllCardTypes","map","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","creditCardType","cardNumber","results","isValidInputType","forEach","cardConfiguration","addMatchingCardsToResults","bestMatch","findBestMatch","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","type","push","updateCard","updates","originalObject","clonedCard","changeOrder","currentPosition","resetModifications","types","module","exports"],"sources":["C:/crs/frontend/sell/node_modules/credit-card-type/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar cardTypes = require(\"./lib/card-types\");\nvar add_matching_cards_to_results_1 = require(\"./lib/add-matching-cards-to-results\");\nvar is_valid_input_type_1 = require(\"./lib/is-valid-input-type\");\nvar find_best_match_1 = require(\"./lib/find-best-match\");\nvar clone_1 = require(\"./lib/clone\");\nvar customCards = {};\nvar cardNames = {\n    VISA: \"visa\",\n    MASTERCARD: \"mastercard\",\n    AMERICAN_EXPRESS: \"american-express\",\n    DINERS_CLUB: \"diners-club\",\n    DISCOVER: \"discover\",\n    JCB: \"jcb\",\n    UNIONPAY: \"unionpay\",\n    MAESTRO: \"maestro\",\n    ELO: \"elo\",\n    MIR: \"mir\",\n    HIPER: \"hiper\",\n    HIPERCARD: \"hipercard\",\n};\nvar ORIGINAL_TEST_ORDER = [\n    cardNames.VISA,\n    cardNames.MASTERCARD,\n    cardNames.AMERICAN_EXPRESS,\n    cardNames.DINERS_CLUB,\n    cardNames.DISCOVER,\n    cardNames.JCB,\n    cardNames.UNIONPAY,\n    cardNames.MAESTRO,\n    cardNames.ELO,\n    cardNames.MIR,\n    cardNames.HIPER,\n    cardNames.HIPERCARD,\n];\nvar testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\nfunction findType(cardType) {\n    return customCards[cardType] || cardTypes[cardType];\n}\nfunction getAllCardTypes() {\n    return testOrder.map(function (cardType) { return clone_1.clone(findType(cardType)); });\n}\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n    if (ignoreErrorForNotExisting === void 0) { ignoreErrorForNotExisting = false; }\n    var position = testOrder.indexOf(name);\n    if (!ignoreErrorForNotExisting && position === -1) {\n        throw new Error('\"' + name + '\" is not a supported card type.');\n    }\n    return position;\n}\nfunction creditCardType(cardNumber) {\n    var results = [];\n    if (!is_valid_input_type_1.isValidInputType(cardNumber)) {\n        return results;\n    }\n    if (cardNumber.length === 0) {\n        return getAllCardTypes();\n    }\n    testOrder.forEach(function (cardType) {\n        var cardConfiguration = findType(cardType);\n        add_matching_cards_to_results_1.addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n    });\n    var bestMatch = find_best_match_1.findBestMatch(results);\n    if (bestMatch) {\n        return [bestMatch];\n    }\n    return results;\n}\ncreditCardType.getTypeInfo = function (cardType) {\n    return clone_1.clone(findType(cardType));\n};\ncreditCardType.removeCard = function (name) {\n    var position = getCardPosition(name);\n    testOrder.splice(position, 1);\n};\ncreditCardType.addCard = function (config) {\n    var existingCardPosition = getCardPosition(config.type, true);\n    customCards[config.type] = config;\n    if (existingCardPosition === -1) {\n        testOrder.push(config.type);\n    }\n};\ncreditCardType.updateCard = function (cardType, updates) {\n    var originalObject = customCards[cardType] || cardTypes[cardType];\n    if (!originalObject) {\n        throw new Error(\"\\\"\" + cardType + \"\\\" is not a recognized type. Use `addCard` instead.'\");\n    }\n    if (updates.type && originalObject.type !== updates.type) {\n        throw new Error(\"Cannot overwrite type parameter.\");\n    }\n    var clonedCard = clone_1.clone(originalObject);\n    clonedCard = __assign(__assign({}, clonedCard), updates);\n    customCards[clonedCard.type] = clonedCard;\n};\ncreditCardType.changeOrder = function (name, position) {\n    var currentPosition = getCardPosition(name);\n    testOrder.splice(currentPosition, 1);\n    testOrder.splice(position, 0, name);\n};\ncreditCardType.resetModifications = function () {\n    testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\n    customCards = {};\n};\ncreditCardType.types = cardNames;\nmodule.exports = creditCardType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}